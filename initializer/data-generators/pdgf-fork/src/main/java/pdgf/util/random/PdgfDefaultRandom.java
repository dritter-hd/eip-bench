/*******************************************************************************
 * Copyright (c) 2011, Chair of Distributed Information Systems, University of Passau. 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *     notice, this list of conditions and the following disclaimer in the 
 *     documentation and/or other materials provided with the distribution. 
 * 
 * 3. Neither the name of the University of Passau nor the names of its 
 *     contributors may be used to endorse or promote products derived 
 *     from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 ******************************************************************************/

package pdgf.util.random;

import pdgf.plugin.AbstractPDGFRandom;

/**
 * A counter based PRNG. Random numbers are generated by feeding a counter into
 * an combined PRNG consisting of an LCG followed by an XOR-Shift PRNG, followed
 * by a Multiply-With-Carry-Generator and last but not least another XOR-Shift
 * PRNG.<br/>
 * Combined counter based PRNG. This is a combined PRNG. First line is a LCG
 * followed by three lines forming a XOR-Shift PRNG followed by a
 * Multiply-With-Carry-Generator and last but not least another XOR-Shift PRNG<br/>
 * inspired by paper "Xorshift RNGs" from George Marsaglia
 * 
 * This class does NOT support autoSkip! a call to autoskip methods results in
 * an IllegalArgumentException<br/>
 * <br/>
 * 
 * @author Michael Frank
 * 
 */
public final class PdgfDefaultRandom extends AbstractPDGFRandom {

	private long seed; // inital seed of this PRNG
	private long currentValue; // current counter value

	public static void main(String[] args) {
		PdgfDefaultRandom r = new PdgfDefaultRandom();
		System.out.println("seed: " + r.getSeed());
		System.out.println("\nintegers [int.min, int.max]:");
		for (int i = 0; i < 20; i++) {
			System.out.println(r.nextInt());
		}
		System.out.println("\nintegers [0, 10[:");
		for (int i = 0; i < 20; i++) {
			System.out.println(r.nextInt(10));
		}
		System.out.println("\nlongs [long.min, long.max]:");
		for (int i = 0; i < 20; i++) {
			System.out.println(r.nextLong());
		}
		System.out.println("\ndoubles [0.0, 1.0]:");
		for (int i = 0; i < 20; i++) {
			System.out.println(r.nextDouble());
		}
	}

	/**
	 * Construct a new PRNG with the given seed. Any seed value is allowed.
	 * 
	 * @param currentValue
	 *            Seed.
	 */
	public PdgfDefaultRandom() {
		setSeed(System.currentTimeMillis());
		setSeed(next());
	}

	/**
	 * Construct a new PRNG with the given seed. Any seed value is allowed.
	 * 
	 * @param seed
	 *            Seed.
	 */
	public PdgfDefaultRandom(long seed) {
		setSeed(seed);

	}

	// ################################################
	// overrides of methods from AbstractPDGFRandom
	// ################################################

	@Override
	public void reSeed(long seed, long skip) {
		this.seed = seed;
		this.currentValue = seed + skip;
	}

	@Override
	public long resetAndNextLong(long skip) {
		currentValue = seed;
		return next(skip);
	}

	@Override
	public long seedAndNextLong(long skip, long seed) {
		// see next(long) for a description
		long v = seed + skip;// skip ahead in counter (internal state)
		this.seed = seed;
		this.currentValue = v;// updated internal state
		v ^= v >>> 15;
		v ^= v << 35;
		v ^= v >>> 4;
		v *= 4768777513237032739L;
		v ^= v << 17;
		v ^= v >>> 31;
		v ^= v << 8;
		return v;

	}

	// ################################################
	// impl of interface methods from SkipRandom
	// ################################################

	public void skip() {
		currentValue++;
	}

	public void skip(long skip) {
		currentValue += skip;
	}

	public void autoSkip(boolean doAutoSkip) {
		throw new IllegalArgumentException(" auto skip not supported");
	}

	public void setAutoSkipStep(long skip) {
		throw new IllegalArgumentException(" auto skip not supported");
	}

	// ################################################
	// overrides of methods from AbstractPDGFRandom
	// ################################################

	@Override
	public void setSeed(long seed) {
		this.seed = seed;
		this.currentValue = seed;
	}

	@Override
	public long getSeed() {
		return seed;
	}

	// ################################################
	// impl of abstract methods from AbstractPDGFRandom
	// ################################################

	@Override
	public long nextLongForSeed(final long skip, final long seed) {
		// see next(long) for a description

		// do not alter internal state, method behaves like a static method
		long v = seed + skip;
		v ^= v >>> 15;
		v ^= v << 35;
		v ^= v >>> 4;
		v *= 4768777513237032739L;
		v ^= v << 17;
		v ^= v >>> 31;
		v ^= v << 8;
		return v;
	}

	/**
	 * Combined counter based PRNG. This is a combined PRNG. First line is a LCG
	 * followed by three lines forming a XOR-Shift PRNG followed by a
	 * Multiply-With-Carry-Generator and last but not least another XOR-Shift
	 * PRNG<br/>
	 * inspired by paper "Xorshift RNGs" from George Marsaglia
	 */
	@Override
	protected long next() {
		long v = currentValue + 1L; // increment counter (internal state++)
		currentValue = v;// updated internal state
		v ^= v >>> 15;
		v ^= v << 35;
		v ^= v >>> 4;
		v *= 4768777513237032739L;
		v ^= v << 17;
		v ^= v >>> 31;
		v ^= v << 8;
		return v;
	}

	/**
	 * Combined counter based PRNG. This is a combined PRNG. First line is a LCG
	 * followed by three lines forming a XOR-Shift PRNG followed by a
	 * Multiply-With-Carry-Generator and last but not least another XOR-Shift
	 * PRNG<br/>
	 * inspired by paper "Xorshift RNGs" from George Marsaglia
	 */
	protected long next(long skip) {
		long v = currentValue + skip;// skip ahead in counter (internal state)
		currentValue = v; // updated internal state
		v ^= v >>> 15;
		v ^= v << 35;
		v ^= v >>> 4;
		v *= 4768777513237032739L;
		v ^= v << 17;
		v ^= v >>> 31;
		v ^= v << 8;
		return v;
	}

}

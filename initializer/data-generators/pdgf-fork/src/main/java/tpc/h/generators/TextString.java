/*******************************************************************************
 * Copyright (c) 2011, Chair of Distributed Information Systems, University of Passau. 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above copyright 
 *     notice, this list of conditions and the following disclaimer in the 
 *     documentation and/or other materials provided with the distribution. 
 * 
 * 3. Neither the name of the University of Passau nor the names of its 
 *     contributors may be used to endorse or promote products derived 
 *     from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 ******************************************************************************/
package tpc.h.generators;

import java.io.IOException;

import pdgf.core.FieldValueDTO;
import pdgf.core.dataGenerator.GenerationContext;
import pdgf.core.exceptions.ConfigurationException;
import pdgf.core.exceptions.XmlException;
import pdgf.plugin.Generator;
import pdgf.util.PseudoTextGenerator;
import pdgf.plugin.AbstractPDGFRandom;

/**
 * 
 * @author Michael Frank
 * @version 1.0 08.06.2010
 */
public class TextString extends Generator {

	private final static int SPREAD_MIN = 4;
	private final static int SPREAD_MAX = 16;
	private final static int SPREAD = SPREAD_MAX - SPREAD_MIN;
	private static PseudoTextGenerator ptg = null;
	private StringBuilder text = new StringBuilder();

	public TextString() throws IOException, ConfigurationException, XmlException {
		super(
				"The term text string[x] represents a string generated by the pseudo text grammar defined in Clause 4.2.2.14. The length of the string is a random value [0.4 x .. 1.6 x] rounded up to the next integer. The output of the pseudo text grammar is truncated at the selected length.");
		ptg = PseudoTextGenerator.instance();
	}

	@Override
	protected void configParsers() throws XmlException {
		super.configParsers();
		
		getNodeParser(NODE_PARSER_size).setRequired(true);
	}

	@Override
	public void nextValue(AbstractPDGFRandom rng,
			GenerationContext generationContext, FieldValueDTO currentFieldValue) {

		// reset buffer;
		text.setLength(0);

		/*
		 * text string[x],length of the string is random value [0.4 x .. 1.6x]
		 * rounded up to the next integer. getSize() is x
		 */
		int len = (int) getSize() * (SPREAD_MIN + rng.nextInt(SPREAD + 1));
		len = (len % 10) == 0 ? len / 10 : (len / 10) + 1;

		// DEBUG
		// System.out.println("size: " + getSize() + "\tlen: " + len +
		// "\t spread: " + SPREAD);
		//		
		// for (int i = 0; i < 100; i++) {
		// int next = rng.nextInt(SPREAD+1);
		// len = (int) getSize() * (SPREAD_MIN + next);
		// len = (len % 10) == 0 ? len / 10 : (len / 10) + 1;
		// System.out.println("cur spread val:" +next + "\tresultinglen" +len);
		// }

		// fill Strinbuilder till >=final length
		while (text.length() < len) {
			ptg.newSentence(text, rng);
		}

		// cut to final length.
		char[] value = new char[len];
		text.getChars(0, len, value, 0);
		currentFieldValue.setValue(value);
		// currentFieldValue.setValue(text.substring(0, len));

	}

	@Override
	public void initialize(int workers) throws ConfigurationException,
			XmlException {
		super.initialize(workers);
		
	}

}
